---
import type { InferGetStaticParamsType, MarkdownInstance } from "astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import type { Post } from "../../types/post.types";
import BlogPost from "../../components/BlogPost.astro";

interface GetStaticPaths {
  params: {
    tag: string;
  };
  props: {
    posts: MarkdownInstance<Post>[];
  };
}

export async function getStaticPaths(): Promise<GetStaticPaths[]> {
  const allPosts = await Astro.glob<Post>("../posts/*.md");

  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.frontmatter.tags?.includes(tag)
    );
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {
      posts.map((post) => (
        <BlogPost url={post.url!} title={post.frontmatter.title} />
      ))
    }
  </ul>
</BaseLayout>
